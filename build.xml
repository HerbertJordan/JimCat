<project name="jimcat" default="build">

	<property name="version" value="v0.1 - Iteration V" />
	<!-- <property name="version" value="v0.1 - Final" /> -->

	<!-- directories configuration -->
	<property name="source" value="src/" />
	<property name="bin" value="build/" />
	<property name="dest" value="dest/" />
	<property name="doc" value="doc/" />
	<property name="libdir" value="./lib" />
	<property name="datadir" value="./data" />
	<property name="antlibs" value="./libant" />

	<property name="scpkeyfile" value="../Password/jimcat.key" />

	<!-- resource file configuration -->
	<property name="manifestfile" value="./res/MANIFEST.MF" />
	<property name="splashscreen" value="./src/org/jimcat/gui/splashscreen/splashscreen.png" />
	<property name="webstartscript" value="./res/jimcat.jnlp" />
	<property name="website" value="./res/jimcat.html" />

	<!-- keystore to sign jars -->
	<property name="keystore" value="./res/keystore" />

	<!-- required libraries -->
	<property name="substance" value="substance.jar" />
	<property name="swingx" value="swingx-2007_05_01.jar" />
	<property name="commons-lang" value="commons-lang-2.3.jar" />
	<property name="joda-time" value="joda-time-1.4.jar" />
	<property name="xstream" value="xstream-1.2.1.jar" />
	<property name="xpp3-min" value="xpp3_min-1.1.3.4.O.jar" />
	<property name="commons-io" value="commons-io-1.3.1.jar" />
	<property name="metadata-extractor" value="metadata-extractor-2.3.1.jar" />
	<property name="log4j" value="log4j-1.2.11.jar" />
	<property name="dom4j" value="dom4j-1.6.1.jar" />
	<property name="commons-logging" value="commons-logging-1.0.4.jar" />
	<property name="commons-collections" value="commons-collections-2.1.1.jar" />
	<property name="db4o" value="db4o-6.4.54.11278-java5.jar" />
	<property name="looks" value="looks-2.1.4.jar" />


	<property name="junit" value="junit.jar" />

	<!-- teh result jar -->
	<property name="jimcat" value="jimcat.jar" />


	<!-- targets -->

	<target name="init" description="initialiszing antscript">
		<mkdir dir="${bin}" />
		<mkdir dir="${dest}" />
		<mkdir dir="${doc}" />

		<!-- a list of source libs -->
		<path id="sourcelibs">
			<pathelement path="${libdir}/${substance}" />
			<pathelement path="${libdir}/${swingx}" />
			<pathelement path="${libdir}/${commons-lang}" />
			<pathelement path="${libdir}/${joda-time}" />
			<pathelement path="${libdir}/${xstream}" />
			<pathelement path="${libdir}/${xpp3-min}" />
			<pathelement path="${libdir}/${commons-io}" />
			<pathelement path="${libdir}/${metadata-extractor}" />
			<pathelement path="${libdir}/${log4j}" />
			<pathelement path="${libdir}/${dom4j}" />
			<pathelement path="${libdir}/${commons-logging}" />
			<pathelement path="${libdir}/${commons-collections}" />
			<pathelement path="${libdir}/${db4o}" />
			<pathelement path="${libdir}/${looks}" />
			<pathelement path="${ant.home}/../org.junit_3.8.1/${junit}" />
		</path>

		<!-- a list of destination libs -->
		<path id="destlibs">
			<pathelement path="${dest}/${substance}" />
			<pathelement path="${dest}/${swingx}" />
			<pathelement path="${dest}/${commons-lang}" />
			<pathelement path="${dest}/${joda-time}" />
			<pathelement path="${dest}/${xstream}" />
			<pathelement path="${dest}/${xpp3-min}" />
			<pathelement path="${dest}/${commons-io}" />
			<pathelement path="${dest}/${metadata-extractor}" />
			<pathelement path="${dest}/${log4j}" />
			<pathelement path="${dest}/${dom4j}" />
			<pathelement path="${dest}/${commons-logging}" />
			<pathelement path="${dest}/${commons-collections}" />
			<pathelement path="${dest}/${db4o}" />
			<pathelement path="${dest}/${junit}" />
			<pathelement path="${dest}/${looks}" />
			<pathelement path="${dest}/${jimcat}" />
		</path>

		<property name="manifest.classpath" value="${substance} ${swingx} ${commons-lang} ${joda-time} ${xstream} ${xpp3-min} ${commons-io} ${metadata-extractor} ${log4j} ${dom4j} ${commons-logging} ${commons-collections} ${looks} ${db4o}" />


		<!-- install svn ant task -->
		<path id="svnAnt.classpath">
			<fileset dir="${antlibs}">
				<include name="**/*.jar" />
			</fileset>
		</path>

		<taskdef name="svn" classname="org.tigris.subversion.svnant.SvnTask" classpathref="svnAnt.classpath" />
	</target>

	<!-- check if all required libraries are available -->
	<target name="check" description="checks if all needed libs are available">
		<antcall target="checkfile">
			<param name="checkfile" value="${libdir}/${substance}" />
		</antcall>

		<antcall target="checkfile">
			<param name="checkfile" value="${libdir}/${swingx}" />
		</antcall>

		<antcall target="checkfile">
			<param name="checkfile" value="${libdir}/${commons-lang}" />
		</antcall>

		<antcall target="checkfile">
			<param name="checkfile" value="${libdir}/${joda-time}" />
		</antcall>

		<antcall target="checkfile">
			<param name="checkfile" value="${libdir}/${xstream}" />
		</antcall>

		<antcall target="checkfile">
			<param name="checkfile" value="${libdir}/${xpp3-min}" />
		</antcall>


		<antcall target="checkfile">
			<param name="checkfile" value="${libdir}/${commons-io}" />
		</antcall>

		<antcall target="checkfile">
			<param name="checkfile" value="${libdir}/${metadata-extractor}" />
		</antcall>

		<antcall target="checkfile">
			<param name="checkfile" value="${libdir}/${log4j}" />
		</antcall>

		<antcall target="checkfile">
			<param name="checkfile" value="${libdir}/${dom4j}" />
		</antcall>

		<antcall target="checkfile">
			<param name="checkfile" value="${libdir}/${commons-logging}" />
		</antcall>

		<antcall target="checkfile">
			<param name="checkfile" value="${libdir}/${commons-collections}" />
		</antcall>

		<antcall target="checkfile">
			<param name="checkfile" value="${libdir}/${db4o}" />
		</antcall>

	</target>

	<!-- ant task checking if single file exists -->
	<target name="checkfile" description="checks if the file handed in is available">
		<available file="${checkfile}" property="jar.present" />
		<fail unless="jar.present" message="Bitte zuerst ${checkfile} bereitstellen!" />
	</target>


	<target name="compile" description="compiles the source of this project" depends="init,check">
		<javac optimize="true" srcdir="${source}" destdir="${bin}" target="1.5">
			<classpath refid="sourcelibs" />
		</javac>
		<copy todir="${bin}">
			<fileset dir="${source}">
				<exclude name="**/*.java" />
			</fileset>
		</copy>
	</target>

	<target name="build" description="generates jar files" depends="init,clean,compile">
		<copy file="${splashscreen}" todir="${bin}" />
		<!-- build time -->
		<tstamp>
			<format property="BUILD_TIME" pattern="dd-MM-yyyy HH:mm:ss" locale="de,AT" />
		</tstamp>
		<!-- svn revision -->
		<!--<svn>
			<status path="./" revisionproperty="REVISION_NUMBER" />
		</svn>-->

		<manifest file="${manifestfile}">
			<attribute name="Main-Class" value="org.jimcat.JimCat" />
			<attribute name="Class-Path" value="${manifest.classpath}" />
			<!-- <attribute name="SplashScreen-Image" value="jimcat.png" /> -->
			<attribute name="Implementation-Title" value="development build" />
			<attribute name="Implementation-Version" value="${version} - Revision: ${BUILD_TIME}" />
		</manifest>

		<jar destfile="${dest}/${jimcat}" basedir="${bin}" manifest="${manifestfile}" />

		<copy todir="${dest}" flatten="true">
			<fileset dir="${libdir}">
				<filename name="**/*.jar" />
			</fileset>
		</copy>
	</target>

	<target name="run" description="runes">
		<java classname="org.jimcat.JimCat" fork="yes" spawn="false">
			<classpath refid="destlibs" />
		</java>
	</target>

	<target name="buildAndRun" description="compiles and runs this project">
		<antcall target="build" />
		<antcall target="run" />
	</target>

	<target name="env" description="prints version infos">
		<echo message="Antversion: ${ant.version}" />
		<echo message="JavaVersion: ${java.version}" />
		<echo message="Ant Libarey: ${ant.home}" />
	</target>

	<!-- if you just want to update jimcat -->
	<target name="deploy" depends="clean,build" description="copy app to server">

		<signjar alias="mykey" keystore="${keystore}" storepass="jimcat" lazy="true">
			<fileset dir="${dest}">
				<include name="jimcat.jar" />
			</fileset>
		</signjar>

		<scp todir="jimcat@perry.mindstream.at:incoming/" keyfile="${scpkeyfile}" passphrase="" trust="true">
			<fileset dir="${dest}">
				<include name="jimcat.jar" />
			</fileset>
		</scp>
	</target>

	<!-- use this if there have been some major changes -->
	<target name="deployAll" depends="clean,build" description="copy app to server">
		<copy file="${website}" todir="${dest}" />
		<copy file="${webstartscript}" todir="${dest}" />
		<copy file="${splashscreen}" todir="${dest}" />

		<antcall target="signdest" />

		<scp todir="jimcat@perry.mindstream.at:incoming/" keyfile="${scpkeyfile}" passphrase="" trust="true">
			<fileset dir="${dest}">
			</fileset>
		</scp>

	</target>

	<target name="signdest" depends="init">
		<signjar alias="mykey" keystore="${keystore}" storepass="jimcat" lazy="true">
			<fileset dir="${dest}">
				<include name="*.jar" />
			</fileset>
		</signjar>
	</target>

	<target name="javadoc" depends="init" description="generate javadoc">
		<javadoc destdir="${doc}" author="false" version="true" use="true" access="private" windowtitle="JimCat Documentation">

			<fileset dir="${source}">
				<include name="**/*.java" />
			</fileset>

			<classpath refid="sourcelibs" />

			<tag name="todo" scope="all" description="To do:" />
			<link href="http://java.sun.com/j2se/1.5.0/docs/api/" />
		</javadoc>
	</target>

	<target name="clean" description="removes dest directory">
		<delete>
			<fileset dir="${bin}/" includes="**" />
		</delete>
		<delete>
			<fileset dir="${dest}/" includes="**" />
		</delete>
		<delete>
			<fileset dir="${doc}/" includes="**" />
		</delete>
	</target>

</project>
